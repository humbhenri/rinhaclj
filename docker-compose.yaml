version: '3.5'
services:
  api1: &api
    build:
      context: ./
    environment:
      - DB_PORT=5432
      - DB_USERNAME=sarah
      - DB_PASSWORD=connor
      - DB_DATABASE=mydatabase
      - DB_HOST=postgres
    hostname: api1
    depends_on:
      - postgres
    expose:
      - "8080"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '1GB'

  api2:
    <<: *api
    hostname: api2

  nginx: # Load Balancer
    image: docker.io/nginx:latest
    command: ["nginx", "-g", "daemon off;"]
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '0.5GB'

  postgres: # Banco de dados
    image: docker.io/postgres
    command: 'postgres -c synchronous_commit=off -c shared_buffers=640MB -c max_connections=330 -c effective_cache_size=1GB -c maintenance_work_mem=384MB'
    environment:
      - POSTGRES_PASSWORD=connor
      - POSTGRES_USER=sarah
      - POSTGRES_DB=mydatabase
    volumes:
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d mydatabase -U sarah -p connor"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '0.5GB'
